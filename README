------------------------------------------
GITUHUB ----------------------------------
------------------------------------------

git@github.com:elisaTramontiDiSopra/arisTheConquerer.git


------------------------------------------
GAME IDEA --------------------------------
------------------------------------------

The user plays the main dog (brown one). The goal is to conquer all the trees in the level peeing on them and,
ultimately, becoming "The Conquerer". To reach this goal the player has to conquer all trees in the levels and,
of course, all the levels. During this "quest" the player has to face an enemy dog (white dog) who will try to
make the conquest harder peeing on the trees himself. The dog is stronger and evil so the player has to avoid
it in any case. Any collision with the dog will result in an immidiate game over.


------------------------------------------
WHY I BUiLT IT THIS WAY ------------------
------------------------------------------

I wanted the game to be potentially infinite with little effort, and I structured the game so that a level can
be added just adding a new object for the level on the configuration file (constants.lua).
To be able to change the graphics quickly, add new ones or update them I structured the files in folders and
used constants.lua to load the related src in the game. During the development I made the graphics a little
simpler but the game is still able to handle multiple tiles for the path where the player can walk, for the
trees and for the obstacles (just uncommenting a few lines and adding the jpg with the same initial name
followed by a progressive number).

If the game had to be potentially infinite I couldn't afford to design each level so I choose the procedural
way to built it: every level is randomly built every time it's loaded.

To make the game more interesting I choose to use accelerometer commands so that the player has to move and
rotate the phone to move the carachter (pretty much like a labirynth wood toy). For this same reason I also
structured the game to be just in portrait mode. It seemed to me that it was the more natural way of moving the
phone and using this kind of controllers.
Since, though, for debugging purposes, I had to built a pad to move the carachter, I left the option to choose
the controls to the player in the option view: pad controls vs accelerometer controls.

I separated in the widg folder the parts of code that handle "close" tasks and that could be reused for other
projects or purposes (the creation of the grid, the saving and loading of options...).
I left the main logic in the game.lua file.

Graphic choices are a matter of chance. I used free resources and an 8 bit approach because it could grant me
a little more graphic coherence even if I used material from different sources and authors. To make it look
better I modified ever file, using common backgrounds I made for the grid tiles.
The choice to make the main dog brown and the enemy white is one of the few concious graphic choices. I wanted
to invert the idea of black == bad and white == good so I gave the player a dark dog (black would have caused
problems with the graphics and details, so I choose dark brown) and left the white color for the enemy guy.

Sounds effect are simple. There is a background music that can be turn on or off, and some win and lose music
that are played on the views that show if you have passed the level or not. Other than that I just added a few
barking sounds. All music and sounds are free resources found online. No changes or edits, other than cuts to
select just what I neede, were made to them.

I created a custom timer using an image I made for graphic purposes. I wanted to be able to change the color
and make it different from the standard one and since this doesn't seem to be possible with the ready-to-use
bar that Corona has I created one of my own and I used the same idea to create the pee bar under the trees

------------------------------------------
DEBUGGING --------------------------------
------------------------------------------
At the actual state of the code there are some issues with the accelerometer functions. I found out just later
during development that using accelerometer might create some problems with collision. If I'd have to pubblish
the app right now I would simply take out this option and leave the pad as the one and only form of controlling
the dog. Giving that the code is done and intertwined with the rest of the app I decided to leave it there
anyway.


------------------------------------------
STRUCTURE --------------------------------
------------------------------------------

main.lua            >> music and sounds loading, checking controls mode then takes you to the menu
menu.lua            >> view that allows you to choose between pages/views
levels.lua          >> visualizes the levels before starting the game
game.lua            >> main file with the actual logic.
                       (changes depending on the level parameters but the file is the same)
nextLevel.lua       >> handles the view if yo win or lose the level
options.lua         >> allows to changes controls from pad to accelerometer
credits.lua         >> credits page, static

grid.lua            >> handles the creation of the grid, graphics and tiles/cell properties, as well as the
                       grids used by jumper for the path finding
player.lua          >> handles the player creation and some functions (like pee)
otherCharacter.lua  >> handles enemy creation and some function
progress.lua        >> handles saving and loading progress
constants.lua       >> configuration file for all the game variables, level variables included


------------------------------------------
LEVEL PARAMETERS -------------------------
------------------------------------------

lvl                 >> level number
timerSeconds        >> seconds to complete the level
pathTracerMoves     >> number of random moves to clear the path on the grid
obstaclesSrc        >> obstacle folder, it allows to change the graphic of the level using just this parameter
obstacleTile        >> name of the images for obstacles, default 'obstacle' (flowers, rocks, water...)
treeTile            >> name of the images for tree, default 'tree'
pathTile            >> name of the images for path, default 'path'
totalLevelTrees     >> how many trees are gonna be in the level (the more the harder the level)
minPeeLevel         >> minimum pee level to consider the tree conquered
maxPeeLevel         >> max pee level allowed, default 100
peeStream           >> value to increase the pee level when you pee (the bigger the easier the level)
vanishingPee        >> value of decreasing pee (the lower the easier the level)
enemyPeeVelocity    >> how fast the enemy can repeat the pee action
enemyPeeTrees       >> how many trees the enemy is gonna pee on
visualizeEnemy      >> will the enemy will be visualized in the level? boolean
enemyTransitionTime >> how fast the enemy is while moving on the level


------------------------------------------
GRID LOGIC -------------------------------
------------------------------------------

The grid is created in grid.lua at the beginning of the level (it's called in game.lua). The grid creation is
procedural and the grid changes each time the level is started. Graphic resources and parameters to build the
grid are all within the constants.lua files

  grid.new()
    - the size of the screen and number of cells is calculated
    - the screen is filled with tiles of random obstacles
    - set the central tile as a path (with openPath) because the player will start from here
    - repeat this cicle until you reach pathTracerMoves (more moves, more path to walk, the easier is the game)

        randomWalking()  >> choose a random direction then turn the ending tile in a path with openPath()
        openPath()       >> change the tile and its properties to an open path that is walkable

    - count the remaining obstacles and give them a body
    transformObstaclesIntoTrees()   >> if a remaining obstacle is reachable, aka close to a path, then turn it
                                       into a tree (with a random image) until you have reached the number of
                                       trees for that level
    - return 3 grids: one complete (path, obstacles and properties), one with just the trees, one with just
      1 for obstacles and 0 for walkable to be used by jumper.

When the module is done the grid is graphically created and there are 3 tables containing data for the level
logic to work


------------------------------------------
ENEMY LOGIC ------------------------------
------------------------------------------

The enemy dog is created in game.lua only if visualizeEnemy = true in the level constants. The enmey dog enters
the screen, looks for a tree, goes there and pees on it till pee level reaches 0, then repeats the actions for as
many trees as are setted in the parameters of the level (enemyPeeTrees). Pee velocity and stream are also
parameters of the level configuration (enemyPeeVelocity, peeStream)

  visualizeEnemyDog()
    whereToEnterTheEnemyDog()    >> chooses the first free cell on the grid to enter the dog
    findThePathToATree()         >> finds a random tree
    findClosestAvailableCell()   >> finds a free cell close to the tree (otherwise jumper doesn't work)
    findPath()                   >> finds the path to the tree/close-cell
    moveBasedOnPath()            >> moves the enemy dog to the tree/close-cell, calcultes directions and
                                    the animation related to it with checkDirectionForAnimation()
    enemyDogPees()               >> repeats the pee action till the pee level is 0
    checkIfEnemyDogIsDone()      >> if the dog has done all the trees required goes back to the entry point
                                    and disappears otherwise looks for another target tree and goes there

--Pathfinding
  I used jumper
  Jumper creates a path between two available points but my end point is a tree and it's unavailable
  so I first had to find the closest available cell with function findClosestAvailableCell()

--Contrasting player
  When it reaches the tree it pees on it till the player pee level is 0 then moves to another tree

--collision with other dog
  This is handled on the main char function (player) since it already checks if it does collide with trees
  If it collides with the other dog it stops the level and visualizes a screen similar to the "lose" one but
  with a different graphic


------------------------------------------
GAME LOGIC ------------------------------- game.lua
------------------------------------------

  -- load level
  -- add physics
  -- init game vars
  -- create the grid
  -- create the player
  -- create the enemy dog
  -- create the timer
  -- create the level text
  -- decrease pee levels in trees for all the game every second
  -- create the ui or activate gyroscope


------------------------------------------
PROGRESS LOGIC --------------------------- progress.lua
------------------------------------------

save()        >> checks last level saved if the current level is higher saves it otherwise not
                 (this allows replayability without deleating progresses)
load()        >> loads higher level saved
